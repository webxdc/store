name: Rust CI

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  check:
    name: Rust checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache Rust builds
        uses: swatinem/rust-cache@v2
      - name: rustfmt
        run: cargo fmt --all -- --check
      - name: create mock assets
        run: |
          mkdir assets
          touch assets/store.xdc
      - name: clippy
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings
      - name: check
        run: cargo check --workspace --all-targets --all-features
      - name: Rust tests
        run: cargo test

  frontend_lint:
    name: Lint the frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build the frontend
        run: |
          npx pnpm install
          npx pnpm run check-types
          npx pnpm run lint
        working-directory: frontend

  frontend_test:
    name: Test the frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test the frontend
        run: |
          npx pnpm install
          npx pnpm test
        working-directory: frontend

  build_dist:
    name: Build the distribution tarball
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        # Checkout pull request HEAD.
        # This is needed to ensure that `git describe` outputs the hash
        # which was actually pushed to the PR
        # rather than automatically created merge commit.
        #
        # By default automatically created merge commit is created for testing,
        # which does not correspond to any commit that ends up in the repository history:
        # <https://github.com/actions/checkout/issues/426>
        #
        # Official documentation can be found at:
        # https://github.com/actions/checkout/blob/96f53100ba2a5449eb71d2e6604bbcd94b9449b5/README.md#Checkout-pull-request-HEAD-commit-instead-of-merge-commit
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - run: |
          npm install -g pnpm

      - run: |
          sudo apt install musl-tools
          rustup target add x86_64-unknown-linux-musl

      - name: Cache Rust builds
        uses: swatinem/rust-cache@v2

      - name: Build the tarball
        run: bash -x scripts/dist.sh
        env:
          ERUDA: "yes"

      - name: Upload the tarball
        uses: actions/upload-artifact@v3
        with:
          name: xdcstore.tar.gz
          path: dist/xdcstore.tar.gz

      - name: Get branch ID
        id: prepare
        run: |
          export BRANCH_ID=$(echo "${{ github.ref }}" | cut -d "/" -f3)
          echo "branchid=$BRANCH_ID" >> $GITHUB_OUTPUT

      - name: Upload preview
        run: |
          mkdir -p "$HOME/.ssh"
          echo "${{ secrets.KEY }}" >__KEY
          chmod 600 __KEY
          scp -o StrictHostKeyChecking=no -v -i __KEY dist/xdcstore.tar.gz "${{ secrets.USERNAME }}@download.delta.chat:/var/www/html/download/store/preview/xdcstore-${{ steps.prepare.outputs.branchid }}.tar.gz"

      - name: Post link to status
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              context: 'Click "Details" to download the distribution tarball â†’',
              state: 'success',
              target_url: "https://download.delta.chat/store/preview/xdcstore-${{ steps.prepare.outputs.branchid }}.tar.gz"
            })

  python_tests_dist:
    name: Download distribution tarball and test it
    needs: build_dist
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the tests and tox.ini
        uses: actions/checkout@v3

      - name: Download the tarball
        uses: actions/download-artifact@v3
        with:
          name: xdcstore.tar.gz

      - name: Unpack the tarball
        run: tar -xf xdcstore.tar.gz

      - name: Install tox
        run: pip install tox

      - name: Run the tests
        env:
          DCC_NEW_TMP_EMAIL: ${{ secrets.DCC_NEW_TMP_EMAIL }}
        run: tox

  python_tests:
    name: Python tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache Rust builds
        uses: swatinem/rust-cache@v2

      - name: Build the frontend
        run: |
          npx pnpm i
          npx pnpm run build
        working-directory: frontend
      - name: Build the bot
        run: cargo build
      - name: Install tox
        run: pip install tox
      - name: Run the tests
        env:
          DCC_NEW_TMP_EMAIL: ${{ secrets.DCC_NEW_TMP_EMAIL }}
        run: tox
